import json
import re

from cve_bin_tool.parsers import Parser


class CCppParser(Parser):
    """Parser for C/C++ conan.lock files"""

    PARSER_MATCH_FILENAMES = [
        "package-lock.json",
    ]

    def __init__(self, cve_db, logger):
        super().__init__(cve_db, logger)
        self.purl_pkg_type = "npm"

    def generate_purl(self, product, vendor="", qualifier={}, subpath=None):
        """Generates PURL after normalizing all components."""
        product = re.sub(r"[^a-zA-Z0-9._-]", "", product).lower()

        if not product:
            return None

        purl = super().generate_purl(
            product,
            vendor,
            qualifier,
            subpath,
        )

        return purl

    def run_checker(self, filename):
        self.filename = filename

        with open(self.filename) as fh:
            data = json.load(fh)
        requires: list[str] = [*data["requires"], *data["build_requires"]]
        for require in requires:
            product, build_version = require.split("/")
            version = build_version.split("#")[0]
            purl = self.generate_purl(product, "")
            vendor = self.get_vendor(purl, product, version)
            if vendor is not None:
                yield from vendor

        self.logger.debug(f"Done scanning file: {self.filename}")
